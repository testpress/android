name: Release Update Testing

on:
  push:
    branches:
      - 'fix_fast_lane'
  workflow_dispatch:

jobs:
  # Step 1: Fetch Subdomains
  fetch_subdomains:
    runs-on: ubuntu-latest
    outputs:
      subdomains: ${{ steps.fetch.outputs.subdomains }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Fetch subdomains
        id: fetch
        run: |
          # Simulating subdomain fetching; replace this with the actual fetching logic if needed
          echo '["lmsdemo", "1234", "lmss"]' > subdomains.json
          SUBDOMAINS=$(cat subdomains.json)
          echo "::set-output name=subdomains::$SUBDOMAINS"

  # Step 2: Deploy App for Each Subdomain
  deploy_app:
    needs: fetch_subdomains
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subdomain: ${{ fromJson(needs.fetch_subdomains.outputs.subdomains) }}
    continue-on-error: true
    env:
      GITHUB_ACCESS_KEY: ${{ secrets.GH_ACCESS_KEY }}
      GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
      API_ACCESS_KEY: ${{ secrets.API_ACCESS_KEY }}
    steps:
      - name: Validate subdomain
        id: validate
        if: ${{ matrix.subdomain }} != 'all'
        run: |
          curl -f https://${{ matrix.subdomain }}.testpress.in/api/v2.5/admin/android/app-config/ -H "API-access-key: $API_ACCESS_KEY"
        continue-on-error: true
        # Capture the result of validation
        echo "VALIDATE_RESULT=${{ job.status }}" >> $GITHUB_ENV

      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: 11

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Caching Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - name: Cache Zoom SDK files
        id: zoom-cache
        uses: actions/cache@v2
        with:
          path: |
            ./mobilertc
            ./commonlib
          key: zoom_sdk_files

      - name: Setup Zoom SDK
        if: steps.zoom-cache.outputs.cache-hit != 'true'
        run: |
          wget https://media.testpress.in/static/android/zoom_sdk.zip
          unzip -o ./zoom_sdk.zip

      - name: Build and deploy app
        id: deploy
        run: |
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          bundle exec fastlane release_update_to subdomain:${{ matrix.subdomain }} release_option:draft
        continue-on-error: true
        # Capture the result of deployment
        echo "DEPLOY_RESULT=${{ job.status }}" >> $GITHUB_ENV

      - name: Log Failure
        if: ${{ failure() }}
        run: |
          echo "Deployment failed for subdomain: ${{ matrix.subdomain }}"

  # Step 3: Validate All Jobs
  validate_release:
    needs: deploy_app
    runs-on: ubuntu-latest
    steps:
      - name: Generate and Upload Report
        run: |
          echo "Generating report on deployment results..."
          
          # Initialize counters
          success_count=0
          failure_count=0
          
          # Report header
          echo "Subdomain | Status" > report.md
          echo "----------|--------" >> report.md
          
          # Read environment variables from all deployment jobs
          for subdomain in $(echo "${{ fromJson(needs.fetch_subdomains.outputs.subdomains) }}" | jq -r '.[]'); do
            validate_result=$(grep "^VALIDATE_RESULT_${subdomain}=" $GITHUB_ENV | cut -d'=' -f2)
            deploy_result=$(grep "^DEPLOY_RESULT_${subdomain}=" $GITHUB_ENV | cut -d'=' -f2)
            if [ "$deploy_result" == "success" ]; then
              success_count=$((success_count + 1))
              echo "${subdomain} | Success" >> report.md
            else
              failure_count=$((failure_count + 1))
              echo "${subdomain} | Failure" >> report.md
            fi
          done
          
          # Print total counts
          echo "Total Success: $success_count"
          echo "Total Failure: $failure_count"
          
          # Output the report
          cat report.md
          
          # Optionally upload the report as an artifact
          echo "Uploading the report..."
          mkdir -p reports
          mv report.md reports/
          tar -czf reports.tar.gz reports/
          echo "Report uploaded."
        uses: actions/upload-artifact@v2
        with:
          name: deployment-report
          path: reports.tar.gz
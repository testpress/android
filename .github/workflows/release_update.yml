name: Release update

on:
  workflow_dispatch:
    inputs:
      subdomain:
        description: "Enter the institute's subdomain or all to release update(all -> deploy update for all institute)"
        required: true
        default: "all"

      release_option:
        description: "Choose the type of release. 'Completed' for a full release or 'Draft' for a pre-release version."
        default: "completed"
        type: choice
        options:
          - "completed"
          - "draft"

jobs:
  release_update:
    runs-on: ubuntu-latest
    env:
      GITHUB_ACCESS_KEY: ${{ secrets.GH_ACCESS_KEY }}
      GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
      API_ACCESS_KEY: ${{ secrets.API_ACCESS_KEY }}

    steps:
      - name: Validate branch based on subdomain
        run: |
          echo "Current branch: $GITHUB_REF"
          SUBDOMAIN="${{ github.event.inputs.subdomain }}"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          # Define the special subdomains
          SPECIAL_SUBDOMAINS="brilliantpalalms brilliantpalaelearn race"
          if echo "$SPECIAL_SUBDOMAINS" | grep -w "$SUBDOMAIN" > /dev/null; then
            if [ "$BRANCH_NAME" != "$SUBDOMAIN" ]; then
              RED='\033[0;31m'
              NC='\033[0m' # No Color
              echo -e "${RED}ERROR: For subdomain '$SUBDOMAIN', workflow must run on branch '$SUBDOMAIN'. Current branch is '$BRANCH_NAME'.${NC}"
              echo -e "${RED}This is because the '$SUBDOMAIN' institute has a customized UI maintained in a separate branch named '$SUBDOMAIN'.${NC}"
              echo -e "${RED}Please merge the latest changes from 'master' into the '$SUBDOMAIN' branch and run this release update from that branch.${NC}"
              exit 1
            fi
          else
            echo "Subdomain '$SUBDOMAIN' can run on any branch. Current branch is '$BRANCH_NAME'."
          fi

      - name: Validate subdomain
        if: ${{ github.event.inputs.subdomain }} != 'all'
        run: |
          curl -f https://${{ github.event.inputs.subdomain }}.testpress.in/api/v2.5/admin/android/app-config/ -H "API-access-key: $API_ACCESS_KEY"

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Caching Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup ruby and fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - name: Cache Zoom SDK files
        id: zoom-cache
        uses: actions/cache@v3
        with:
          path: |
            ./mobilertc
            ./commonlib
          key: zoom_sdk_files

      - name: Setup Zoom SDK
        if: steps.zoom-cache.outputs.cache-hit != 'true'
        run: |
          wget https://media.testpress.in/static/android/zoom_sdk.zip
          unzip -o ./zoom_sdk.zip

      - name: Build and deploy app
        run: |
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          bundle exec fastlane release_update_to subdomain:${{ github.event.inputs.subdomain }} release_option:${{ github.event.inputs.release_option }}

      - name: Store app artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: |
            app/build/outputs/apk/release/app-release.apk
            app/build/outputs/bundle/release/app-release.aab
            app/build/outputs/apk/debug/app-debug.apk

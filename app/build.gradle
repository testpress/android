import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext {
    testpressSDK = '1.4.116'
}

def jsonFile = file('src/main/assets/config.json')
def json = new JsonSlurper().parseText(jsonFile.text)


dependencies {

    def lifecycle_version = "2.2.0"
    def fragment_version = "1.4.1"

    // Dependency Injection
    implementation 'com.squareup.dagger:dagger:1.0.1'
    implementation 'com.squareup.dagger:dagger-compiler:1.0.1'
    implementation 'com.jakewharton:butterknife:6.1.0'
    implementation "ru.tinkoff.scrollingpagerindicator:scrollingpagerindicator:1.1.0"

    implementation 'com.github.kevinsawicki:wishlist:0.9@aar'

    if (json.zoom_enabled) {
        implementation project(':commonlib')
        implementation project(':mobilertc')
    }

    // Event Bus
    implementation 'com.squareup:otto:1.3.5'

    // Image Loading
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'

    // HTTP
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    implementation 'com.squareup.okhttp:okhttp:2.3.0'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'

    // Material Dialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    // GreenDao for database
    implementation 'de.greenrobot:greendao:2.0.0'
    
    // Testpress Course(which inbuilt has exam & core module)
    implementation 'com.github.testpress:course:' + testpressSDK
    implementation 'com.github.testpress:store:' + testpressSDK

    // Gcm
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'org.greenrobot:eventbus:3.1.1'

    // Google Sign In
    implementation 'com.google.android.gms:play-services-auth:20.2.0'

    // Facebook SDK
    implementation 'com.facebook.android:facebook-android-sdk:8.2.0'

    // Allow methods more than 64K
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    // Country code picker
    // https://github.com/hbb20/CountryCodePickerProject/wiki
    implementation "com.github.hbb20:CountryCodePickerProject:2.4.2"
    implementation 'io.michaelrocks:libphonenumber-android:8.12.57'

    implementation 'io.sentry:sentry-android:5.3.0'
    implementation 'org.slf4j:slf4j-nop:1.7.25'


    //Unit test
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.5'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.5'
    testImplementation "com.squareup.okhttp3:mockwebserver:3.12.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.test.ext:truth:1.4.0"
    testImplementation 'org.robolectric:robolectric:3.2.1'
    testImplementation 'org.mockito:mockito-core:1.10.5'
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test:rules:1.4.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    implementation 'com.github.vkay94:DoubleTapPlayerView:1.0.0'

    implementation 'com.github.mhiew:android-pdf-viewer:3.2.0-beta.1'
    implementation 'com.github.alexto9090:PRDownloader:1.0'
}

def key_alias = "sample"
def key_password = "sample"
def store_file = "testpress_debug_keystore.jks"
def store_password = "sample"

try {
    key_alias = TESTPRESS_KEY_ALIAS
    key_password = TESTPRESS_KEY_PASSWORD
    store_file = TESTPRESS_KEYSTORE_PATH
    store_password = TESTPRESS_KEYSTORE_PASSWORD
} catch (Exception ignored) {
    println 'Failed to find key store details. Social Login is disabled'
}

android {

    compileSdkVersion 33
    buildToolsVersion '30.0.3'
    ndkVersion "23.2.8568313"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        versionName json.version
        versionCode json.version_code

        def host_url = json.testpress_site_subdomain + '.testpress.in'
        resValue "string", "host_url", host_url
        buildConfigField "String", "BASE_URL", '"https://' + host_url + '"'
        resValue "string", "app_name", json.app_name
        resValue "string", "version", "v " + json.version
        resValue "string", "share_message", json.share_message
        resValue "string", "facebook_app_id", json.facebook_app_id
        resValue "string", "fb_login_protocol_scheme", json.facebook_app_id
        resValue "string", "server_client_id", json.server_client_id
        resValue "color", "primary", json.primary_color
        resValue "color", "secondary", json.secondary_color
        resValue "color", "tertiary", json.tertiary_color
        buildConfigField "boolean", "ALLOW_ANONYMOUS_USER", "" + json.allow_anonymous_user
        buildConfigField "boolean", "GROWTH_HACKS_ENABLED", "" + json.is_growth_hacks_enabled
        buildConfigField "boolean", "SHOW_PDF_VERTICALLY", "" + json.show_pdf_vertically
        buildConfigField "String", "SHARE_MESSAGE", '"' + json.share_message + '"'
        if (json.display_username_on_video != null) {
            buildConfigField "boolean", "DISPLAY_USERNAME_ON_VIDEO", "" + json.display_username_on_video
        }
        if (json.white_labeled_host_url == "" || json.white_labeled_host_url == null) {
            resValue "string", "white_labeled_host_url", host_url
            buildConfigField "String", "WHITE_LABELED_HOST_URL", '"https://' + host_url + '"'
        } else {
            resValue "string", "white_labeled_host_url", json.white_labeled_host_url
            buildConfigField "String", "WHITE_LABELED_HOST_URL", '"https://' + json.white_labeled_host_url + '"'
        }
        if (json.current_payment_app == null) {
            resValue "string", "current_payment_app", ""
            buildConfigField "String", "CURRENT_PAYMENT_APP", '""'
        } else {
            resValue "string", "current_payment_app", json.current_payment_app
            buildConfigField "String", "CURRENT_PAYMENT_APP", '"' + json.current_payment_app + '"'
        }
        buildConfigField "boolean", "ZOOM_CUSTOM_MEETING_UI_ENABLED", "" + json.zoom_custom_meeting_ui_enabled

        applicationId json.package_name
        resValue "string", "package_name", json.package_name

        multiDexEnabled true

    }

    packagingOptions {
        // Exclude file to avoid
        // Error: Duplicate files during packaging of APK
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'LICENSE.txt'

        // Error: More than one file was found with OS independent path
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    signingConfigs {
        config {
            keyAlias key_alias
            keyPassword key_password
            storeFile file(store_file)
            storePassword store_password
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            minifyEnabled false
            // zipAlign false // this is default for debug
        }
        release {
            signingConfig signingConfigs.config
            // minifyEnabled true
            // proguardFile '..\proguard.cfg'
            // signingConfig signingConfigs.release
            // zipAlign true // this is default for release
            // testPackageName 'in.testpress.testpress.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

apply plugin: 'com.google.gms.google-services'
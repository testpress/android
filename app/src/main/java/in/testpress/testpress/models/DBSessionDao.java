package in.testpress.testpress.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.testpress.models.DBSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSESSION".
*/
public class DBSessionDao extends AbstractDao<DBSession, Long> {

    public static final String TABLENAME = "DBSESSION";

    /**
     * Properties of entity DBSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Created = new Property(1, Long.class, "created", false, "CREATED");
        public final static Property State = new Property(2, String.class, "state", false, "STATE");
        public final static Property LatestPostReceived = new Property(3, String.class, "latestPostReceived", false, "LATEST_POST_RECEIVED");
        public final static Property OldestPostReceived = new Property(4, String.class, "oldestPostReceived", false, "OLDEST_POST_RECEIVED");
        public final static Property LastSyncedDate = new Property(5, String.class, "lastSyncedDate", false, "LAST_SYNCED_DATE");
    };


    public DBSessionDao(DaoConfig config) {
        super(config);
    }
    
    public DBSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSESSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CREATED\" INTEGER," + // 1: created
                "\"STATE\" TEXT," + // 2: state
                "\"LATEST_POST_RECEIVED\" TEXT," + // 3: latestPostReceived
                "\"OLDEST_POST_RECEIVED\" TEXT," + // 4: oldestPostReceived
                "\"LAST_SYNCED_DATE\" TEXT);"); // 5: lastSyncedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSESSION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(2, created);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(3, state);
        }
 
        String latestPostReceived = entity.getLatestPostReceived();
        if (latestPostReceived != null) {
            stmt.bindString(4, latestPostReceived);
        }
 
        String oldestPostReceived = entity.getOldestPostReceived();
        if (oldestPostReceived != null) {
            stmt.bindString(5, oldestPostReceived);
        }
 
        String lastSyncedDate = entity.getLastSyncedDate();
        if (lastSyncedDate != null) {
            stmt.bindString(6, lastSyncedDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBSession readEntity(Cursor cursor, int offset) {
        DBSession entity = new DBSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // created
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latestPostReceived
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oldestPostReceived
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // lastSyncedDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreated(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setState(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatestPostReceived(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOldestPostReceived(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastSyncedDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

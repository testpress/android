package in.testpress.testpress.models;

import in.testpress.testpress.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "FORUM".
 */
public class Forum {

    private String shortWebUrl;
    private String shortUrl;
    private String webUrl;
    private String created;
    private String commentsUrl;
    private String url;
    private Long id;
    private String modified;
    private Integer upvotes;
    private Integer downvotes;
    private String title;
    private String summary;
    private Boolean isActive;
    private String publishedDate;
    private Integer commentsCount;
    private Boolean isLocked;
    private Integer subject;
    private Integer viewsCount;
    private Integer participantsCount;
    private String lastCommentedTime;
    private String contentHtml;
    private Boolean isPublic;
    private String shortLink;
    private Integer institute;
    private String slug;
    private Boolean isPublished;
    private Boolean isApproved;
    private Boolean forum;
    private String ipAddress;
    private Long voteId;
    private Integer typeOfVote;
    private Long published;
    private Long modifiedDate;
    private Long creatorId;
    private Long commentorId;
    private Long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ForumDao myDao;

    private User createdBy;
    private Long createdBy__resolvedKey;

    private User lastCommentedBy;
    private Long lastCommentedBy__resolvedKey;

    private Category category;
    private Long category__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Forum() {
    }

    public Forum(Long id) {
        this.id = id;
    }

    public Forum(String shortWebUrl, String shortUrl, String webUrl, String created, String commentsUrl, String url, Long id, String modified, Integer upvotes, Integer downvotes, String title, String summary, Boolean isActive, String publishedDate, Integer commentsCount, Boolean isLocked, Integer subject, Integer viewsCount, Integer participantsCount, String lastCommentedTime, String contentHtml, Boolean isPublic, String shortLink, Integer institute, String slug, Boolean isPublished, Boolean isApproved, Boolean forum, String ipAddress, Long voteId, Integer typeOfVote, Long published, Long modifiedDate, Long creatorId, Long commentorId, Long categoryId) {
        this.shortWebUrl = shortWebUrl;
        this.shortUrl = shortUrl;
        this.webUrl = webUrl;
        this.created = created;
        this.commentsUrl = commentsUrl;
        this.url = url;
        this.id = id;
        this.modified = modified;
        this.upvotes = upvotes;
        this.downvotes = downvotes;
        this.title = title;
        this.summary = summary;
        this.isActive = isActive;
        this.publishedDate = publishedDate;
        this.commentsCount = commentsCount;
        this.isLocked = isLocked;
        this.subject = subject;
        this.viewsCount = viewsCount;
        this.participantsCount = participantsCount;
        this.lastCommentedTime = lastCommentedTime;
        this.contentHtml = contentHtml;
        this.isPublic = isPublic;
        this.shortLink = shortLink;
        this.institute = institute;
        this.slug = slug;
        this.isPublished = isPublished;
        this.isApproved = isApproved;
        this.forum = forum;
        this.ipAddress = ipAddress;
        this.voteId = voteId;
        this.typeOfVote = typeOfVote;
        this.published = published;
        this.modifiedDate = modifiedDate;
        this.creatorId = creatorId;
        this.commentorId = commentorId;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getForumDao() : null;
    }

    public String getShortWebUrl() {
        return shortWebUrl;
    }

    public void setShortWebUrl(String shortWebUrl) {
        this.shortWebUrl = shortWebUrl;
    }

    public String getShortUrl() {
        return shortUrl;
    }

    public void setShortUrl(String shortUrl) {
        this.shortUrl = shortUrl;
    }

    public String getWebUrl() {
        return webUrl;
    }

    public void setWebUrl(String webUrl) {
        this.webUrl = webUrl;
    }

    public String getCreated() {
        return created;
    }

    public void setCreated(String created) {
        this.created = created;
    }

    public String getCommentsUrl() {
        return commentsUrl;
    }

    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getModified() {
        return modified;
    }

    public void setModified(String modified) {
        this.modified = modified;
    }

    public Integer getUpvotes() {
        return upvotes;
    }

    public void setUpvotes(Integer upvotes) {
        this.upvotes = upvotes;
    }

    public Integer getDownvotes() {
        return downvotes;
    }

    public void setDownvotes(Integer downvotes) {
        this.downvotes = downvotes;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public String getPublishedDate() {
        return publishedDate;
    }

    public void setPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
    }

    public Integer getCommentsCount() {
        return commentsCount;
    }

    public void setCommentsCount(Integer commentsCount) {
        this.commentsCount = commentsCount;
    }

    public Boolean getIsLocked() {
        return isLocked;
    }

    public void setIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
    }

    public Integer getSubject() {
        return subject;
    }

    public void setSubject(Integer subject) {
        this.subject = subject;
    }

    public Integer getViewsCount() {
        return viewsCount;
    }

    public void setViewsCount(Integer viewsCount) {
        this.viewsCount = viewsCount;
    }

    public Integer getParticipantsCount() {
        return participantsCount;
    }

    public void setParticipantsCount(Integer participantsCount) {
        this.participantsCount = participantsCount;
    }

    public String getLastCommentedTime() {
        return lastCommentedTime;
    }

    public void setLastCommentedTime(String lastCommentedTime) {
        this.lastCommentedTime = lastCommentedTime;
    }

    public String getContentHtml() {
        return contentHtml;
    }

    public void setContentHtml(String contentHtml) {
        this.contentHtml = contentHtml;
    }

    public Boolean getIsPublic() {
        return isPublic;
    }

    public void setIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
    }

    public String getShortLink() {
        return shortLink;
    }

    public void setShortLink(String shortLink) {
        this.shortLink = shortLink;
    }

    public Integer getInstitute() {
        return institute;
    }

    public void setInstitute(Integer institute) {
        this.institute = institute;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public Boolean getIsPublished() {
        return isPublished;
    }

    public void setIsPublished(Boolean isPublished) {
        this.isPublished = isPublished;
    }

    public Boolean getIsApproved() {
        return isApproved;
    }

    public void setIsApproved(Boolean isApproved) {
        this.isApproved = isApproved;
    }

    public Boolean getForum() {
        return forum;
    }

    public void setForum(Boolean forum) {
        this.forum = forum;
    }

    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public Long getVoteId() {
        return voteId;
    }

    public void setVoteId(Long voteId) {
        this.voteId = voteId;
    }

    public Integer getTypeOfVote() {
        return typeOfVote;
    }

    public void setTypeOfVote(Integer typeOfVote) {
        this.typeOfVote = typeOfVote;
    }

    public Long getPublished() {
        return published;
    }

    public void setPublished(Long published) {
        this.published = published;
    }

    public Long getModifiedDate() {
        return modifiedDate;
    }

    public void setModifiedDate(Long modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    public Long getCreatorId() {
        return creatorId;
    }

    public void setCreatorId(Long creatorId) {
        this.creatorId = creatorId;
    }

    public Long getCommentorId() {
        return commentorId;
    }

    public void setCommentorId(Long commentorId) {
        this.commentorId = commentorId;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public User getCreatedBy() {
        Long __key = this.creatorId;
        if (createdBy__resolvedKey == null || !createdBy__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User createdByNew = targetDao.load(__key);
            synchronized (this) {
                createdBy = createdByNew;
            	createdBy__resolvedKey = __key;
            }
        }
        return createdBy;
    }

    public void setCreatedBy(User createdBy) {
        synchronized (this) {
            this.createdBy = createdBy;
            creatorId = createdBy == null ? null : createdBy.getId();
            createdBy__resolvedKey = creatorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getLastCommentedBy() {
        Long __key = this.commentorId;
        if (lastCommentedBy__resolvedKey == null || !lastCommentedBy__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User lastCommentedByNew = targetDao.load(__key);
            synchronized (this) {
                lastCommentedBy = lastCommentedByNew;
            	lastCommentedBy__resolvedKey = __key;
            }
        }
        return lastCommentedBy;
    }

    public void setLastCommentedBy(User lastCommentedBy) {
        synchronized (this) {
            this.lastCommentedBy = lastCommentedBy;
            commentorId = lastCommentedBy == null ? null : lastCommentedBy.getId();
            lastCommentedBy__resolvedKey = commentorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Category getRawCategory() {
        if (myDao == null) {
            return category;
        }

        return getCategory();
    }

    public User getRawCreatedBy() {
        if (myDao == null) {
            return createdBy;
        }

        return getCreatedBy();
    }

    public User getRawLastCommentedBy() {
        if (myDao == null) {
            return lastCommentedBy;
        }

        return getLastCommentedBy();
    }
    // KEEP METHODS END

}

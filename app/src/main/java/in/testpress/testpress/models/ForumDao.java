package in.testpress.testpress.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.testpress.models.Forum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORUM".
*/
public class ForumDao extends AbstractDao<Forum, Long> {

    public static final String TABLENAME = "FORUM";

    /**
     * Properties of entity Forum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ShortWebUrl = new Property(0, String.class, "shortWebUrl", false, "SHORT_WEB_URL");
        public final static Property ShortUrl = new Property(1, String.class, "shortUrl", false, "SHORT_URL");
        public final static Property WebUrl = new Property(2, String.class, "webUrl", false, "WEB_URL");
        public final static Property Created = new Property(3, String.class, "created", false, "CREATED");
        public final static Property CommentsUrl = new Property(4, String.class, "commentsUrl", false, "COMMENTS_URL");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Id = new Property(6, Long.class, "id", true, "ID");
        public final static Property Modified = new Property(7, String.class, "modified", false, "MODIFIED");
        public final static Property Upvotes = new Property(8, Integer.class, "upvotes", false, "UPVOTES");
        public final static Property Downvotes = new Property(9, Integer.class, "downvotes", false, "DOWNVOTES");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(11, String.class, "summary", false, "SUMMARY");
        public final static Property IsActive = new Property(12, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property PublishedDate = new Property(13, String.class, "publishedDate", false, "PUBLISHED_DATE");
        public final static Property CommentsCount = new Property(14, Integer.class, "commentsCount", false, "COMMENTS_COUNT");
        public final static Property IsLocked = new Property(15, Boolean.class, "isLocked", false, "IS_LOCKED");
        public final static Property Subject = new Property(16, Integer.class, "subject", false, "SUBJECT");
        public final static Property ViewsCount = new Property(17, Integer.class, "viewsCount", false, "VIEWS_COUNT");
        public final static Property ParticipantsCount = new Property(18, Integer.class, "participantsCount", false, "PARTICIPANTS_COUNT");
        public final static Property LastCommentedTime = new Property(19, String.class, "lastCommentedTime", false, "LAST_COMMENTED_TIME");
        public final static Property ContentHtml = new Property(20, String.class, "contentHtml", false, "CONTENT_HTML");
        public final static Property IsPublic = new Property(21, Boolean.class, "isPublic", false, "IS_PUBLIC");
        public final static Property ShortLink = new Property(22, String.class, "shortLink", false, "SHORT_LINK");
        public final static Property Institute = new Property(23, Integer.class, "institute", false, "INSTITUTE");
        public final static Property Slug = new Property(24, String.class, "slug", false, "SLUG");
        public final static Property IsPublished = new Property(25, Boolean.class, "isPublished", false, "IS_PUBLISHED");
        public final static Property IsApproved = new Property(26, Boolean.class, "isApproved", false, "IS_APPROVED");
        public final static Property Forum = new Property(27, Boolean.class, "forum", false, "FORUM");
        public final static Property IpAddress = new Property(28, String.class, "ipAddress", false, "IP_ADDRESS");
        public final static Property VoteId = new Property(29, Long.class, "voteId", false, "VOTE_ID");
        public final static Property TypeOfVote = new Property(30, Integer.class, "typeOfVote", false, "TYPE_OF_VOTE");
        public final static Property Published = new Property(31, Long.class, "published", false, "PUBLISHED");
        public final static Property ModifiedDate = new Property(32, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property HasAnswer = new Property(33, Boolean.class, "hasAnswer", false, "HAS_ANSWER");
        public final static Property CreatorId = new Property(34, Long.class, "creatorId", false, "CREATOR_ID");
        public final static Property CommentorId = new Property(35, Long.class, "commentorId", false, "COMMENTOR_ID");
        public final static Property CategoryId = new Property(36, Long.class, "categoryId", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;


    public ForumDao(DaoConfig config) {
        super(config);
    }
    
    public ForumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORUM\" (" + //
                "\"SHORT_WEB_URL\" TEXT," + // 0: shortWebUrl
                "\"SHORT_URL\" TEXT," + // 1: shortUrl
                "\"WEB_URL\" TEXT," + // 2: webUrl
                "\"CREATED\" TEXT," + // 3: created
                "\"COMMENTS_URL\" TEXT," + // 4: commentsUrl
                "\"URL\" TEXT," + // 5: url
                "\"ID\" INTEGER PRIMARY KEY ," + // 6: id
                "\"MODIFIED\" TEXT," + // 7: modified
                "\"UPVOTES\" INTEGER," + // 8: upvotes
                "\"DOWNVOTES\" INTEGER," + // 9: downvotes
                "\"TITLE\" TEXT," + // 10: title
                "\"SUMMARY\" TEXT," + // 11: summary
                "\"IS_ACTIVE\" INTEGER," + // 12: isActive
                "\"PUBLISHED_DATE\" TEXT," + // 13: publishedDate
                "\"COMMENTS_COUNT\" INTEGER," + // 14: commentsCount
                "\"IS_LOCKED\" INTEGER," + // 15: isLocked
                "\"SUBJECT\" INTEGER," + // 16: subject
                "\"VIEWS_COUNT\" INTEGER," + // 17: viewsCount
                "\"PARTICIPANTS_COUNT\" INTEGER," + // 18: participantsCount
                "\"LAST_COMMENTED_TIME\" TEXT," + // 19: lastCommentedTime
                "\"CONTENT_HTML\" TEXT," + // 20: contentHtml
                "\"IS_PUBLIC\" INTEGER," + // 21: isPublic
                "\"SHORT_LINK\" TEXT," + // 22: shortLink
                "\"INSTITUTE\" INTEGER," + // 23: institute
                "\"SLUG\" TEXT," + // 24: slug
                "\"IS_PUBLISHED\" INTEGER," + // 25: isPublished
                "\"IS_APPROVED\" INTEGER," + // 26: isApproved
                "\"FORUM\" INTEGER," + // 27: forum
                "\"IP_ADDRESS\" TEXT," + // 28: ipAddress
                "\"VOTE_ID\" INTEGER," + // 29: voteId
                "\"TYPE_OF_VOTE\" INTEGER," + // 30: typeOfVote
                "\"PUBLISHED\" INTEGER," + // 31: published
                "\"MODIFIED_DATE\" INTEGER," + // 32: modifiedDate
                "\"HAS_ANSWER\" INTEGER," + // 33: hasAnswer
                "\"CREATOR_ID\" INTEGER," + // 34: creatorId
                "\"COMMENTOR_ID\" INTEGER," + // 35: commentorId
                "\"CATEGORY_ID\" INTEGER);"); // 36: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORUM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Forum entity) {
        stmt.clearBindings();
 
        String shortWebUrl = entity.getShortWebUrl();
        if (shortWebUrl != null) {
            stmt.bindString(1, shortWebUrl);
        }
 
        String shortUrl = entity.getShortUrl();
        if (shortUrl != null) {
            stmt.bindString(2, shortUrl);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(3, webUrl);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(4, created);
        }
 
        String commentsUrl = entity.getCommentsUrl();
        if (commentsUrl != null) {
            stmt.bindString(5, commentsUrl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(8, modified);
        }
 
        Integer upvotes = entity.getUpvotes();
        if (upvotes != null) {
            stmt.bindLong(9, upvotes);
        }
 
        Integer downvotes = entity.getDownvotes();
        if (downvotes != null) {
            stmt.bindLong(10, downvotes);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(12, summary);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(13, isActive ? 1L: 0L);
        }
 
        String publishedDate = entity.getPublishedDate();
        if (publishedDate != null) {
            stmt.bindString(14, publishedDate);
        }
 
        Integer commentsCount = entity.getCommentsCount();
        if (commentsCount != null) {
            stmt.bindLong(15, commentsCount);
        }
 
        Boolean isLocked = entity.getIsLocked();
        if (isLocked != null) {
            stmt.bindLong(16, isLocked ? 1L: 0L);
        }
 
        Integer subject = entity.getSubject();
        if (subject != null) {
            stmt.bindLong(17, subject);
        }
 
        Integer viewsCount = entity.getViewsCount();
        if (viewsCount != null) {
            stmt.bindLong(18, viewsCount);
        }
 
        Integer participantsCount = entity.getParticipantsCount();
        if (participantsCount != null) {
            stmt.bindLong(19, participantsCount);
        }
 
        String lastCommentedTime = entity.getLastCommentedTime();
        if (lastCommentedTime != null) {
            stmt.bindString(20, lastCommentedTime);
        }
 
        String contentHtml = entity.getContentHtml();
        if (contentHtml != null) {
            stmt.bindString(21, contentHtml);
        }
 
        Boolean isPublic = entity.getIsPublic();
        if (isPublic != null) {
            stmt.bindLong(22, isPublic ? 1L: 0L);
        }
 
        String shortLink = entity.getShortLink();
        if (shortLink != null) {
            stmt.bindString(23, shortLink);
        }
 
        Integer institute = entity.getInstitute();
        if (institute != null) {
            stmt.bindLong(24, institute);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(25, slug);
        }
 
        Boolean isPublished = entity.getIsPublished();
        if (isPublished != null) {
            stmt.bindLong(26, isPublished ? 1L: 0L);
        }
 
        Boolean isApproved = entity.getIsApproved();
        if (isApproved != null) {
            stmt.bindLong(27, isApproved ? 1L: 0L);
        }
 
        Boolean forum = entity.getForum();
        if (forum != null) {
            stmt.bindLong(28, forum ? 1L: 0L);
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(29, ipAddress);
        }
 
        Long voteId = entity.getVoteId();
        if (voteId != null) {
            stmt.bindLong(30, voteId);
        }
 
        Integer typeOfVote = entity.getTypeOfVote();
        if (typeOfVote != null) {
            stmt.bindLong(31, typeOfVote);
        }
 
        Long published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(32, published);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(33, modifiedDate);
        }
 
        Boolean hasAnswer = entity.getHasAnswer();
        if (hasAnswer != null) {
            stmt.bindLong(34, hasAnswer ? 1L: 0L);
        }
 
        Long creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindLong(35, creatorId);
        }
 
        Long commentorId = entity.getCommentorId();
        if (commentorId != null) {
            stmt.bindLong(36, commentorId);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(37, categoryId);
        }
    }

    @Override
    protected void attachEntity(Forum entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
    }    

    /** @inheritdoc */
    @Override
    public Forum readEntity(Cursor cursor, int offset) {
        Forum entity = new Forum( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // shortWebUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shortUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // webUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // created
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commentsUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // modified
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // upvotes
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // downvotes
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // summary
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isActive
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // publishedDate
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // commentsCount
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isLocked
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // subject
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // viewsCount
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // participantsCount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lastCommentedTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // contentHtml
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isPublic
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // shortLink
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // institute
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // slug
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // isPublished
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // isApproved
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // forum
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // ipAddress
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // voteId
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // typeOfVote
            cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31), // published
            cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // modifiedDate
            cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0, // hasAnswer
            cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34), // creatorId
            cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35), // commentorId
            cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36) // categoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Forum entity, int offset) {
        entity.setShortWebUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShortUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWebUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentsUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setModified(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpvotes(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDownvotes(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSummary(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsActive(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setPublishedDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCommentsCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsLocked(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setSubject(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setViewsCount(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setParticipantsCount(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setLastCommentedTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setContentHtml(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsPublic(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setShortLink(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setInstitute(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setSlug(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIsPublished(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setIsApproved(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setForum(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setIpAddress(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setVoteId(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setTypeOfVote(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setPublished(cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31));
        entity.setModifiedDate(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setHasAnswer(cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0);
        entity.setCreatorId(cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34));
        entity.setCommentorId(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
        entity.setCategoryId(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Forum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Forum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM FORUM T");
            builder.append(" LEFT JOIN USER T0 ON T.\"CREATOR_ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"COMMENTOR_ID\"=T1.\"ID\"");
            builder.append(" LEFT JOIN CATEGORY T2 ON T.\"CATEGORY_ID\"=T2.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Forum loadCurrentDeep(Cursor cursor, boolean lock) {
        Forum entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User createdBy = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setCreatedBy(createdBy);
        offset += daoSession.getUserDao().getAllColumns().length;

        User lastCommentedBy = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setLastCommentedBy(lastCommentedBy);
        offset += daoSession.getUserDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);

        return entity;    
    }

    public Forum loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Forum> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Forum> list = new ArrayList<Forum>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Forum> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Forum> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
